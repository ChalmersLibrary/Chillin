@inherits Umbraco.Web.Mvc.UmbracoViewPage<Chalmers.ILL.Models.Page.ChalmersILLOrderListPageModel>
@using umbraco.cms.businesslogic.member;
@using System.Web.Security;
@using Examine;
@using Chalmers.ILL.Controllers.SurfaceControllers;
@using Chalmers.ILL.Extensions;
@using Umbraco.Core.Logging;
@using System.Globalization;
@using Chalmers.ILL.Models;


@{
    Layout = "ChalmersILL.cshtml";
}

@functions
{
    /// <summary>
    /// Appends the given arguments to the query string in the given URL.
    /// </summary>
    /// <param name="url">The URL string which should be modified.</param>
    /// <param name="arguments">The arguments which should be added.</param>
    /// <returns>The new URL string containing the modified query string.</returns>
    string AppendArgumentsToQueryString(string url, List<Tuple<string, string>> arguments)
    {
        var uriBuilder = new UriBuilder(url);
        var query = HttpUtility.ParseQueryString(uriBuilder.Query);
        foreach (var arg in arguments)
        {
            query[arg.Item1] = arg.Item2;
        }
        uriBuilder.Query = query.ToString();
        return uriBuilder.ToString();
    }

    /// <summary>
    /// Looks at an order item and returns the correct sorting order index based on status.
    /// </summary>
    /// <param name="item">The search result from Examine containing the order item.</param>
    /// <returns>An index reflecting the sort order.</returns>
    int GetSortOrderFromOrderItemSearchResult(OrderItemModel item)
    {
        var status = "";
        try
        {
            status = item.Status;
        }
        catch (Exception)
        {
            // NOP
        }

        var i = Convert.ToInt32(status == "" ? "0" : status.Split(':').First());

        var sortingWeights = new Int32[] { 1, 2, 4, 6, 7, 10, 11, 12, 17, 13, 3, 14, 9, 5, 8, 0, 15, 16 };

        return sortingWeights[i];
    }

    string GetSigelFromLibraryName(string libraryName)
    {
        var ret = "";

        if (libraryName == "Huvudbiblioteket")
        {
            ret = "Z";
        }
        else if (libraryName == "Arkitekturbiblioteket")
        {
            ret = "Za";
        }
        else if (libraryName == "Lindholmenbiblioteket")
        {
            ret = "Zl";
        }

        return ret;
    }
}

@{
    var orderCriterium = "Status";
    string theQuery = "";
    string debugMessage = "";
    if (!String.IsNullOrEmpty(Request.QueryString["orderCriterium"]))
    {
        orderCriterium = Request.QueryString["orderCriterium"];
    }
}

@if (Model.PendingOrderItems.Items.Count() > 0)
{
    var start = Request.QueryString["start"] != null ? Int32.Parse(Request.QueryString["start"]) : 0;
    var areMoreItems = start + 50 < Model.PendingOrderItems.Count;
    var queryString = Request.QueryString["query"] != null ? "&query=" + Request.QueryString["query"] : "";

    <div class="text-center">
        <div id="library-filter-buttons" class="btn-group" data-pending-filter-change="0">
            <button id="library00-button" type="button" value="" class="btn btn-default active" style="border-radius:0;">Alla <span id="allaBibliotek" class="badge">0</span></button>
            <button id="library01-button" type="button" value=".Huvudbiblioteket" class="btn btn-default">Huvudbiblioteket <span id="Huvudbiblioteket" class="badge">0</span></button>
            <button id="library02-button" type="button" value=".Lindholmenbiblioteket" class="btn btn-default">Kuggen <span id="Lindholmenbiblioteket" class="badge">0</span></button>
            <button id="library03-button" type="button" value=".Arkitekturbiblioteket" class="btn btn-default" style="border-radius:0;">Arkitekturbiblioteket <span id="Arkitekturbiblioteket" class="badge">0</span></button>
        </div>
    </div>

    <div>
        <h2 id="order-list-title">Beställningar - Alla bibliotek</h2>
        <div id="filter-buttons" class="btn-group" data-pending-filter-change="0">
            <button id="status00-button" type="button" value="" class="btn btn-default active" style="border-radius:0;">Alla <span id="status00-counter" class="badge">0</span></button>
            <button id="status01-button" type="button" value=".chillin-status-01" class="btn btn-default btn-success hidden">Ny <span id="status01-counter" class="badge">0</span></button>
            <button id="status09-button" type="button" value=".chillin-status-09" class="btn btn-default btn-danger hidden">Mottagen <span id="status09-counter" class="badge">0</span></button>
            <button id="status02-button" type="button" value=".chillin-status-02" class="btn btn-default btn-danger hidden">Åtgärda <span id="status02-counter" class="badge">0</span></button>
            <button id="status12-button" type="button" value=".chillin-status-12" class="btn btn-default btn-danger hidden">Krävd <span id="status12-counter" class="badge">0</span></button>
            <button id="status03-button" type="button" value=".chillin-status-03" class="btn btn-default btn-danger hidden">Beställd <span id="status03-counter" class="badge">0</span></button>
            <button id="status04-button" type="button" value=".chillin-status-04" class="btn btn-default btn-danger hidden">Väntar <span id="status04-counter" class="badge">0</span></button>
            <button id="status13-button" type="button" value=".chillin-status-13" class="btn btn-default btn-danger hidden">Transport <span id="status13-counter" class="badge">0</span></button>
            <button id="status14-button" type="button" value=".chillin-status-14" class="btn btn-default btn-danger hidden">Infodisk <span id="status14-counter" class="badge">0</span></button>
            <button id="status11-button" type="button" value=".chillin-status-11" class="btn btn-default btn-danger hidden">Utlånad <span id="status11-counter" class="badge">0</span></button>
            <button id="status15-button" type="button" value=".chillin-status-15" class="btn btn-default btn-danger hidden">Förlorad? <span id="status15-counter" class="badge">0</span></button>
            <button id="status05-button" type="button" value=".chillin-status-05" class="btn btn-default btn-info hidden">Levererad <span id="status05-counter" class="badge">0</span></button>
            <button id="status06-button" type="button" value=".chillin-status-06" class="btn btn-default btn-info hidden">Annullerad <span id="status06-counter" class="badge">0</span></button>
            <button id="status07-button" type="button" value=".chillin-status-07" class="btn btn-default btn-info hidden">Överförd <span id="status07-counter" class="badge">0</span></button>
            <button id="status08-button" type="button" value=".chillin-status-08" class="btn btn-default btn-info hidden">Inköpt <span id="status08-counter" class="badge">0</span></button>
            <button id="status10-button" type="button" value=".chillin-status-10" class="btn btn-default btn-info hidden">Återsänd <span id="status10-counter" class="badge">0</span></button>
            <button id="status16-button" type="button" value=".chillin-status-16" class="btn btn-default btn-info hidden" style="border-radius:0;">Förlorad <span id="status16-counter" class="badge">0</span></button>
        </div>
    </div>

    if (!String.IsNullOrEmpty(Request.QueryString["query"]))
    {
        theQuery += "query=";
        theQuery += Request.QueryString["query"];
        <h3>Beställningar som matchar <strong>@Request.QueryString["query"]</strong></h3>
    }

    if (Model.PendingOrderItems.Count > 50)
    {
        <h3>Visar ordrar @(start) till @(start + 49 < Model.PendingOrderItems.Count ? start + 49 : Model.PendingOrderItems.Count) av totalt @(Model.PendingOrderItems.Count) ordrar.</h3>
    }

<div class="order-list container-fluid">

    <div class="row header">
        <div class="col-sm-7">Referens</div>
        <div class="col-sm-2">Namn</div>
        <div class="col-sm-1">Bibliotek</div>
        <div class="col-sm-1"><a id="sort-on-type-link" href="#">Typ </a></div>
        <div class="col-sm-1"><a id="sort-on-status-link" href="#">Status <span id="sort-icon" class="glyphicon glyphicon-chevron-down"></span></a></div>
    </div>

    @if (start > 0)
    {
        <section style="height: 8rem; display: flex; justify-content: center; align-items: center;"><a href="/bestaellningar/?start=@(start - 50)@(queryString)">Gå till föregående sida med ordrar.</a></section>
    }

    @{
        int loggedInMember = Model.CurrentMemberId;
        foreach (var item in Model.PendingOrderItems.Items.OrderBy(GetSortOrderFromOrderItemSearchResult).ThenBy(y => y.FollowUpDate))
        {
            @RenderOrderList(loggedInMember, item.NodeId, item.FollowUpDate, item.PatronName, item.DeliveryLibrary, item.Status,
                item.Type, item.Reference, item.EditedBy, item.PurchaseLibrary);
        }

        // Add debug message
        debugMessage += "query.ToString()=" + Request.QueryString["query"];
    }

    @if (areMoreItems)
    {
        <section style="height: 8rem; display: flex; justify-content: center; align-items: center;"><a href="/bestaellningar/?start=@(start + 50)@(queryString)">Gå till nästa sida med ordrar.</a></section>
    }

    <div class="silly-filler"></div>
</div><!-- /order-list -->
}
else
{
    <h2 style="text-align:center; margin-top:100px;">Hittade inga aktuella ordrar.</h2>
}

@if (Model.ManualAnonymizationItems.Items.Count() > 0)
{
    <section style="height:12rem;"></section>
    <section style="height: 8rem; display: flex; justify-content: center; align-items: center; background-color: khaki;">Nedanför visas @(Model.ManualAnonymizationItems.Items.Count()) av totalt @(Model.ManualAnonymizationItems.Count) ordrar som behöver manuell anonymisering.</section>

    <section class="anonymization-list">
        @foreach (var item in Model.ManualAnonymizationItems.Items)
        {
        @RenderOrderList(Model.CurrentMemberId, item.NodeId, item.FollowUpDate, item.PatronName, item.DeliveryLibrary, item.Status,
            item.Type, item.Reference, item.EditedBy, item.PurchaseLibrary);
        }
    </section>
}

@* Debug for Search or List *@
@if (Request.Params["debug"] == "1" && debugMessage != "")
{
    <div class="debug-message">
        <strong>debugMessage:</strong> @debugMessage
    </div>
}


@helper ParseStatusPrevalue(string prevalue)
{
    @prevalue.Split(':').Last()
}

@helper RenderOrderList(int memberId, object Id, DateTime date, object patronName, object library, object status, object type,
    object reference, object editorID, object purchaseLibrary)
{
    string css_class = "";
    string data_attribute = "";
    int loggedInMember = memberId;

    // Check if item is marked as being edited; if so, check so it is not edited by the member currently logged in
    if ((editorID.ToString().AsInt() != 0) && (editorID.ToString().AsInt() != loggedInMember))
    {
        css_class = "illedit row striped locked";
    }
    else
    {
        css_class = "illedit row striped";
    }

    // Mark this item with data-attribute so we can unlock it when doing document.ready unlocking
    if ((editorID.ToString().AsInt() != 0) && (editorID.ToString().AsInt() == loggedInMember))
    {
        data_attribute = "data-locked-by-memberid=\"" + editorID.ToString() + "\"";
    }

    <div id="@Id" class="@css_class" data-editorid="@editorID.ToString().AsInt()" @data_attribute>
        <div class="col-sm-7" data-column="reference">@Html.Raw(reference.ToString().Replace("\n", "<br />"))</div>
        <div class="col-sm-2" data-column="patronName">@patronName</div>
        <div class="col-sm-1 deliveryLibrary @library" data-column="deliveryLibrary">@GetSigelFromLibraryName(library.ToString())</div>
        <div class="col-sm-1" data-column="type">@(type.ToString().ToLower().Contains("inköpsförslag") ? (purchaseLibrary.ToString() + " " + type) : type)</div>
        <div class="col-sm-1" data-column="status" data-fud="@date.Ticks">
            @if (status.ToString().StartsWith("01:"))
            {
                <span class="order-item-status label label-success status-@status.ToString().Split(':').First() chillin-status-@status.ToString().Split(':').First()">@ParseStatusPrevalue(status.ToString())</span>
            }
            else if (status.ToString().StartsWith("05:") ||
                     status.ToString().StartsWith("06:") ||
                     status.ToString().StartsWith("07:") ||
                     status.ToString().StartsWith("08:") ||
                     status.ToString().StartsWith("10:") ||
                     status.ToString().StartsWith("16:"))
            {
                <span class="order-item-status label label-info status-@status.ToString().Split(':').First() chillin-status-@status.ToString().Split(':').First()">@ParseStatusPrevalue(status.ToString())</span>
            }
            else
            {
                <span class="order-item-status label label-danger status-@status.ToString().Split(':').First() chillin-status-@status.ToString().Split(':').First()">@ParseStatusPrevalue(status.ToString())</span>
            }
        </div>
    </div>
}