@model Chalmers.ILL.Models.PartialPage.Settings.ModifyProviderData

<div class="col-lg-12">
    <h3>Modifiera leverantörsdata på alla ordrar</h3>
</div>
<div class="col-md-6">
    <div class="form-group">
        <label for="providerName">Ändra från leverantörsnamn</label>
        <input type="text" class="form-control" id="from-provider-name" name="from-provider-name" placeholder="Leverantörens namn" value="">
        <div id="from-provider-list" class="list-group" style="height: 175px; overflow: auto; background: #ebebeb;">
            @foreach (var providerName in Model.Providers)
            {
                <a href="#" onclick="$('#from-provider-name').val($(this).text()); event.preventDefault();" class="list-group-item">@providerName</a>
            }
        </div>
    </div>
</div>
<div class="col-md-6">
    <div class="form-group">
        <label for="providerName">Ändra till leverantörsnamn</label>
        <input type="text" class="form-control" id="to-provider-name" name="to-provider-name" placeholder="Leverantörens namn" value="">
        <div id="to-provider-list" class="list-group" style="height: 175px; overflow: auto; background: #ebebeb;">
            @foreach (var providerName in Model.Providers)
            {
                <a href="#" onclick="$('#to-provider-name').val($(this).text()); event.preventDefault();" class="list-group-item">@providerName</a>
            }
        </div>
    </div>
</div>
<div class="col-md-6">
    <button class="btn btn-success" onclick="changeProviderNameOnAllOrderItems();">Ändra leverantörsnamn</button>
</div>
<div id="provider-name-update-status" class="popup-center">
    <p></p>
    <button class="btn btn-danger btn-lg" type="button" onclick="abortBatchProviderNameChange();">Stoppa</button>
</div>

<script type="text/javascript">
    var abortMision = false;
    function changeProviderNameOnAllOrderItems() {
        var fromProviderName = $('#from-provider-name').val().trim();
        var toProviderName = $('#to-provider-name').val().trim();

        if (fromProviderName && toProviderName) {
            lockScreen();
            $.get("/umbraco/surface/ProviderDataSurface/GetNodeIdsForOrderItemsWithGivenProviderName", {
                providerName: fromProviderName
            }).done(function (ids) {
                var estimatedTime = Math.floor(ids.length * 4 / 60);
                var estimatedTimeStr = "ca " + estimatedTime.toString() + " minuter";
                if (estimatedTime < 1) {
                    estimatedTimeStr = "mindre än en minut";
                } else if (estimatedTime == 1) {
                    estimatedTimeStr = "ca en minut";
                }
                var res = window.confirm("Detta kommer nu att ändra " + ids.length + " ordrar som har leverantörsnamn \"" + fromProviderName + "\" så att de istället har leverantörsnamn \"" + toProviderName + "\".\n\nDessa ändringar går ej att ångra och är det många ordrar som ändringen berör kan det ta en stund och det kan påverka Chillins prestanda.\n\nUppskattad tid är " + estimatedTimeStr + ".\n\nÄr du säker på att du vill fortsätta?");
                if (res) {
                    $("#provider-name-update-status").show();
                    $("#provider-name-update-status p").text("0/" + ids.length);
                    abortMission = false;
                    changeProviderName(ids, 0, toProviderName);
                } else {
                    unlockScreen();
                }
            }).fail(function (jqxhr, textStatus, error) {
                alert("Error: " + textStatus + " " + error);
                unlockScreen();
            });
        }
    }

    function abortBatchProviderNameChange() {
        abortMission = true;
    }

    function changeProviderName(ids, index, providerName) {
        $.post("/umbraco/surface/ProviderDataSurface/SetProviderName", {
            nodeId: ids[index],
            providerName: providerName
        }).done(function (res) {
            if (!res.Success) {
                unlockScreen();
                alert(res.Message);
                $("#provider-settings-link").click();
            } else if (index >= ids.length - 1) {
                $("#provider-name-update-status").hide();
                unlockScreen();
                alert("Ändrade namn på " + ids.length + " ordrar.");
                $("#provider-settings-link").click();
            } else if (abortMission) {
                $("#provider-name-update-status").hide();
                unlockScreen();
                alert("Körning stoppades innan den var färdig.");
                $("#provider-settings-link").click();
            } else {
                $("#provider-name-update-status p").text((index + 1) + "/" + ids.length);
                // Wait 2 seconds after each item so that we don't kill the server.
                setTimeout(function () { changeProviderName(ids, ++index, providerName); }, 2000);
            }
        }).fail(function (jqxhr, textStatus, error) {
            alert("Error: " + textStatus + " " + error);
            unlockScreen();
            $("#provider-settings-link").click();
        });
    }

    $("#from-provider-name").keyup(function () {
        var providerNameInput = $(this);
        var re = new RegExp(providerNameInput.val(), "i");

        var updated = false;
        $("#from-provider-list > a").each(function () {
            // Only show list elements if they match what is written in the text input.
            $(this).toggle(re.test($(this).text()));

            // If we have written the same word as already exists but with different case, substitute it with the existing case.
            if (!updated && $(this).text().toLowerCase() === providerNameInput.val().toLowerCase()) {
                providerNameInput.val($(this).text());
                updated = true;
            }
        });
    });

    $("#to-provider-name").keyup(function () {
        var providerNameInput = $(this);
        var re = new RegExp(providerNameInput.val(), "i");

        var updated = false;
        $("#to-provider-list > a").each(function () {
            // Only show list elements if they match what is written in the text input.
            $(this).toggle(re.test($(this).text()));

            // If we have written the same word as already exists but with different case, substitute it with the existing case.
            if (!updated && $(this).text().toLowerCase() === providerNameInput.val().toLowerCase()) {
                providerNameInput.val($(this).text());
                updated = true;
            }
        });
    });
</script>